{
  "hash": "6684b14138d40fbe50f5116ae40d8ba5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"snake_case vs Everything_Else\"\nauthor: \"al\"\ndate: \"2024-05-07\"\nformat: \n  html:\n    code-fold: true\ncategories: [news]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, dpi=60, out.width = \"100%\")\noptions(scipen=999)\noptions(knitr.kable.NA = '--') #'--'\noptions(knitr.kable.NAN = '--')\n```\n:::\n\n\n\nBeen preferring `snakecase` naming convention for all files and columns and variables for a long time for the following reasons:\n\n1.  It's much easier to type. Reaching for the shift button is a pain.\n2.  Arguably easier to read. I find it easier to read `snake_case` than `CamelCase`.\n3.  Can make it easy to `name` things in a fashion that allows you to dissect what something is by the way it is named and allows automatic sorting to group similar things together. This is a good read - https://speakerdeck.com/jennybc/how-to-name-files-the-sequel . This pays homage to one of my favorite programmers right now who is [Michael Sumner](https://github.com/mdsumner). His tag line on `github` is \"no names have an anonymous function\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"thumbnail.jpg\")\n```\n\n::: {.cell-output-display}\n![](thumbnail.jpg){#fig-snake_vs_camel width=100%}\n:::\n:::\n\n\nWorth noting that `all-rules-need-to-be-broken` sometimes such as when you are naming chunks in `Rmarkdown` and likely `Quarto` too. It breaks our `cross-references` (ex see @fig-snake_vs_camel) vs @fig-all) when we name our chunks with underscores in them. Fun fact. Good chat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"all.jpeg\")\n```\n\n::: {.cell-output-display}\n![](all.jpeg){#fig-all width=100%}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
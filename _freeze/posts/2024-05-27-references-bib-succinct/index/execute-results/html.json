{
  "hash": "369b089e2dddfab2cad96258f64ac1af",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cleaning up bib files flexibly with Zotero and R\"\nauthor: \"al\"\ndate: \"2024-05-27\"\ndate-modified: \"2024-05-27\"\ncategories: [news, bibtex, R, citations]\nimage: \"image.jpg\"\nparams:\n  repo_owner: \"NewGraphEnvironment\"\n  repo_name: \"new_graphiti\"\n  post_dir_name: \"2024-05-27-references-bib-succinct\"\nformat: \n  html:\n    code-fold: true\n---\n\n\nHere we will clean up a bib file exported from `Zotero` using `R` to contain only the entries found in a `Rmarkdown` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/airvine/Projects/repo/new_graphiti\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(knitr)\n\n# get the name of this post directory\npost_dir <- paste0(here::here(), \"/posts/\", params$post_dir_name)\npost_dir_fig <- paste0(post_dir, \"/fig/\")\n```\n:::\n\n\n\nLet's define our `.bib` files\n\n::: {.cell}\n\n```{.r .cell-code}\nrmd_file <- \"~/Projects/repo/fish_passage_peace_2023_reporting/fish_passage_peace_2023_reporting.Rmd\"\nbib_file <- paste0(here::here(), \"/assets/NewGraphEnvironment.bib\")\noutput_file <- \"~/Projects/repo/fish_passage_peace_2023_reporting/references.bib\"\n```\n:::\n\n\n\nHere are the functions:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to extract citations from an RMarkdown file\nbib_extract_citations <- function(rmd_file, additional_citations = c()) {\n  # Read the entire RMarkdown file\n  lines <- readLines(rmd_file)\n  \n  # Concatenate all lines into a single string\n  text <- paste(lines, collapse = \" \")\n  \n  # Regular expression to find citations in the form of @this_citation or [@that_citation; @another_citation]\n  citation_pattern <- \"@[a-zA-Z0-9_:-]+\"\n  \n  # Extract all citations\n  citations <- str_extract_all(text, citation_pattern)[[1]]\n  \n  # Remove the leading '@' from the citations\n  citations <- unique(sub(\"^@\", \"\", citations))\n  \n  # Combine with additional citations\n  all_citations <- unique(c(citations, additional_citations))\n  \n  return(all_citations)\n}\n\n# Function to clean a BibTeX file to keep only cited entries\nbib_clean <- function(bib_file, citations, output_file) {\n  file.create(output_file)\n  # Read the entire BibTeX file\n  lines <- readLines(bib_file)\n  \n  # Initialize variables\n  keep_entry <- FALSE\n  cleaned_lines <- c()\n  \n  for (line in lines) {\n    # Check if the line starts a new citation entry\n    if (grepl(\"^@\", line)) {\n      # Extract the citation key\n      citation_key <- sub(\"^@.*\\\\{([^,]+),.*\", \"\\\\1\", line)\n      \n      # Determine if the entry should be kept\n      keep_entry <- citation_key %in% citations\n    }\n    \n    # Add the line to cleaned_lines if the entry is to be kept\n    if (keep_entry) {\n      cleaned_lines <- c(cleaned_lines, line)\n    }\n  }\n  \n  # Write the cleaned lines to the output file\n  writeLines(cleaned_lines, output_file)\n  \n  cat(\"Cleaned BibTeX file created:\", output_file, \"\\n\")\n}\n```\n:::\n\n\n\n1. Export our entire library from `Zotero` to a bib file in the `assets` directory of this repo. We don't even change the name of the file.  \n\nAs a big part of the motivation to do this is to reduce the bloat in our repositories we will add the default\nname of the bib file to the `.gitignore` of this repo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(paste0(post_dir_fig, \"Screen Shot 2024-05-27 at 1.40.44 PM.png\"))\n```\n\n::: {.cell-output-display}\n![](fig/Screen Shot 2024-05-27 at 1.40.44 PM.png){width=840}\n:::\n\n```{.r .cell-code}\nknitr::include_graphics(paste0(post_dir_fig, \"Screen Shot 2024-05-27 at 1.40.55 PM.png\"))\n```\n\n::: {.cell-output-display}\n![](fig/Screen Shot 2024-05-27 at 1.40.55 PM.png){width=840}\n:::\n:::\n\n\n\n\n# Write a Cleaned up `.bib` file\n\nWe scan a `.Rmd` file for all the references cited within it.  For bookdown projects we use an amalgamated file created during the build.  To be able to access it after the build is complete we need to turn on in the `_bookdown.yml` file by setting the `delete_merged_file: false` option.  This will create a file named whatever is entered in the `book_filename: ` field in that same `_bookdown.yml`.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(paste0(post_dir_fig, \"Screen Shot 2024-05-27 at 1.52.16 PM.png\"))\n```\n\n::: {.cell-output-display}\n![](fig/Screen Shot 2024-05-27 at 1.52.16 PM.png){width=840}\n:::\n:::\n\n\n\n\nOne more step:\n\nThe `bibtex` referenced extracted from our \"mom\" `.bib` file (ie. NewGraphEnvironment.bib) would not include references included in the `nocite` entry of the `index.Rmd` file unless we specifically include them in the function as `additional_citations` - so we need to remember to do that. Let's add one for the sake of demonstration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnocites <- c(\"busch_etal2013LandscapeLevelModel\")\n```\n:::\n\n\n## Extract citations from the RMarkdown file\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract citations from the RMarkdown file\ncitations <- bib_extract_citations(rmd_file, additional_citations = nocites)\n```\n:::\n\n\n\n## Clean the BibTeX file to keep only cited entries\n\n::: {.cell}\n\n```{.r .cell-code}\nbib_clean(bib_file, citations, output_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCleaned BibTeX file created: ~/Projects/repo/fish_passage_peace_2023_reporting/references.bib \n```\n\n\n:::\n:::\n\n\n\n# Gotchas\n1. This will not include references included in the `nocite` entry of the `index.Rmd` file unless we specifcally include\nthem in the function as `additional_citations` so we need to remember to do that.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
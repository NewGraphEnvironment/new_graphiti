---
title: "Getting details of historic orthophoto imagery with R"
author: "al"
date: "2024-11-15"
date-modified: "2024-11-17"
categories: [fwapg, r, bcdata]
image: "image.jpg"
params:
  repo_owner: "NewGraphEnvironment"
  repo_name: "new_graphiti"
  post_name: "2024-11-15-bcdata-ortho-historic"
  update_gis: FALSE
format: 
  html:
    code-fold: true
---

We would like to obtain historic ortho photo imagery so that we can compare historic watershed conditions compared to current (ex. floodplain vegetation clearing, channel morphology, etc.). First we will generate an area of interest. In our first few code chunks we load our packages and load in some functions that will help us do this work.

```{r setup, include=FALSE}
# Suppress warnings and messages globally
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r ld-pkgs}

suppressMessages(library(tidyverse))
library(ggplot2)
library(bcdata)
library(fwapgr)
suppressMessages(library(sf))
# library(leaflet)
# library(leafem)
```

```{r params}
path_post <- fs::path(
  here::here(),
  "posts",
  params$post_name
)

```

```{r static-imports, eval = FALSE}
staticimports::import(
  dir = fs::path(
    path_post,
    "scripts"
  ),
  outfile = fs::path(
    path_post,
    "scripts",
    "staticimports",
    ext = "R"
  )
)
```

```{r ld-functions}
source(
  fs::path(
    path_post,
    "scripts",
    "staticimports",
    ext = "R"
  )
)


lfile_name <- function(dat_name = NULL, ext = "geojson") {
  fs::path(
    path_post,
    "data",
    paste0(dat_name, ".", ext)
  )
}

lburn_sf <- function(dat = NULL, dat_name = NULL) {
  if (is.null(dat_name)) {
    cli::cli_abort("You must provide a name for the GeoJSON file using `dat_name`.")
  }
  
  dat |>
    sf::st_write(
      lfile_name(dat_name),
      delete_dsn = TRUE
      # append = FALSE
    )
}

# Function to validate and repair geometries
lngs_geom_validate <- function(layer) {
  layer <- sf::st_make_valid(layer)
  layer <- layer[sf::st_is_valid(layer), ]
  return(layer)
}
```


## Download Spatial Data Layers
Here we download our area of interest which is the Neexdzii Kwah River (a.k.a Upper Bulkley River) which is located between Houston, BC (just south of Smithers) and Topley, BC which is east of Houston and north of Burns Lake, BC.  We hit up our remote database managed by Simon Norris with a package built by Poisson Consulting specifically for the task.  We use the `downstream_route_measure` of the Bulkley River (identified through a unique `blue_line_key`) to query the watershed area upstream of the point where the Neexdzii Kwah River enters the Wedzin Kwah River (a.k.a Morice River).

```{r dl-aoi, eval = params$update_gis}

# lets build a custom watersehed just for upstream of the confluence of Neexdzii Kwa and Wetzin Kwa
# blueline key
blk <- 360873822
# downstream route measure
drm <- 166030.4

aoi <- fwapgr::fwa_watershed_at_measure(blue_line_key = blk, 
                                        downstream_route_measure = drm) |> 
  sf::st_transform(4326)


#get the bounding box of our aoi
# aoi_bb <- sf::st_bbox(aoi)

#lets burn this so we don't need to download each time
aoi <- lngs_geom_validate(aoi)
lburn_sf(
  aoi,
  deparse(substitute(aoi)))

```

Next we grab a few key layers from the BC Data Catalougue API using convience functions in our `rfp` package ("Reproducable Field Products") which wrap the provincially maintained `bcdata` package.  We grab:

  - Railways
  - Streams in the Bulkley Watershed group that are 5th order or greater.
  - [Historic Imagery Points](https://catalogue.data.gov.bc.ca/dataset/airborne-imagery-historical-index-map-points)
  - [Historic Imagery Polygons](https://catalogue.data.gov.bc.ca/dataset/airborne-imagery-historical-index-map-polygons)
  - [NTS 1:50,000 Grid](https://catalogue.data.gov.bc.ca/) (we will see why in a second)
  


```{r dl-layers, eval = params$update_gis}

# grab all the railways
l_rail <- rfp::rfp_bcd_get_data(
    bcdata_record_id = "whse_basemapping.gba_railway_tracks_sp"
) |> 
  sf::st_transform(4326) |> 
  janitor::clean_names() 


# streams in the bulkley and then filter to just keep the big ones
l_streams <- rfp::rfp_bcd_get_data(
  bcdata_record_id = "whse_basemapping.fwa_stream_networks_sp",
  col_filter = "watershed_group_code",
  col_filter_value = "BULK",
  # grab a smaller object by including less columns
  col_extract = c("linear_feature_id", "stream_order", "gnis_name", "downstream_route_measure", "blue_line_key", "length_metre")
) |> 
  sf::st_transform(4326) |> 
  janitor::clean_names() |> 
  dplyr::filter(stream_order > 4)

# historic orthophotos
# WHSE_IMAGERY_AND_BASE_MAPS.AIMG_HIST_INDEX_MAPS_POLY
#https://catalogue.data.gov.bc.ca/dataset/airborne-imagery-historical-index-map-points
l_imagery <- rfp::rfp_bcd_get_data(
  bcdata_record_id = "WHSE_IMAGERY_AND_BASE_MAPS.AIMG_ORTHOPHOTO_TILES_POLY") |> 
  sf::st_transform(4326) |> 
  janitor::clean_names()

l_imagery_hist <- rfp::rfp_bcd_get_data(
  bcdata_record_id = "WHSE_IMAGERY_AND_BASE_MAPS.AIMG_HIST_INDEX_MAPS_POINT") |> 
  sf::st_transform(4326) |> 
  janitor::clean_names()

l_imagery_grid <- rfp::rfp_bcd_get_data(
  bcdata_record_id = "WHSE_BASEMAPPING.NTS_50K_GRID") |> 
  sf::st_transform(4326) |> 
  janitor::clean_names()

# burn all these to file so quick to repeat

```

Following download we run some clean up to ensure the geometry of our spatial files is "valid", trim to our area of interest and burn locally so that every time we rerun iterations of this memo we don't need to wait for the download process which takes a little longer than we want to wait.

```{r burn-layers, eval = params$update_gis}

# get a list of the objects in our env that start with l_
ls <- ls()[stringr::str_starts(ls(), "l_")] 

layers_all <- tibble::lst(
  !!!mget(ls)
)

# Apply validation to the AOI and layers
layers_all <- purrr::map(
  layers_all, 
  lngs_geom_validate
  )

# clip them  with purrr and sf
layers_trimmed <- purrr::map(
  layers_all,
  ~ sf::st_intersection(.x, aoi)
) 

# Burn each `sf` object to GeoJSON
purrr::walk2(
  layers_trimmed,
  names(layers_trimmed),
  lburn_sf
)
```

Next - we read the layers back in. The download step is skipped now unless we turn it on again by changing the `update_gis` param in our memo `yaml` header to `TRUE`.

```{r ld-layers}
# now we read in all the sf layers that are local so it is really quick
layers_to_load <- fs::dir_ls(
  fs::path(
    path_post,
    "data"),
  glob = "*.geojson"
)

layers_trimmed <- layers_to_load |>
  purrr::map(
    ~ sf::st_read(
      .x, quiet = TRUE)
  ) |> 
  purrr::set_names(
    nm =tools::file_path_sans_ext(
      basename(
        names(
          layers_to_load
        )
      )
    )
  )
```


OK, seems we cannot get machine readable historical air photo information from layers downloaded from BC data catalogue - perhpas because the majority of the photos are not georeferenced? What we see in the map under the table below (red dot on map) is one point which contains 8 records including links to pdfs and kmls which are basically a georeferenced drawing of where the imagery overlaps.  From as far as I can tell - if we wanted to try to use these kmls or pdfs to select orthoimagery we would need to manually eyeball where the photo polygons overlap where we want to see imagery for and manually write down identifiers for photo by hand. Maybe I am missing something but it sure seems that way.  This what the information in the [Historic Imagery Points](https://catalogue.data.gov.bc.ca/dataset/airborne-imagery-historical-index-map-points) layer looks like.

```{r tab-imagery-points}
layers_trimmed$l_imagery_hist |> 
  sf::st_drop_geometry() |> 
  knitr::kable()

```



```{r}
map <- ggplot() +
  geom_sf(
      data = layers_trimmed$aoi,
      fill = "transparent",
      color = "black",
      linewidth = .5
  ) +
  geom_sf(
    data = layers_trimmed$l_streams,
    color = "blue",
    size = 1
  ) +
  geom_sf(
    data = layers_trimmed$l_rail,
    color = "black",
    size = 1
  ) +
  # geom_sf(
  #   data = layers_trimmed$l_imagery,
  #   alpha = 0,
  # ) +
  geom_sf(
    data = layers_trimmed$l_imagery_hist,
    color = "red",
    size = 2
  ) +
  geom_sf(
    data = layers_trimmed$l_imagery_grid,
    alpha = 0.25,
  ) +
  geom_sf_text(
    data = layers_trimmed$l_imagery_grid,
    aes(label = map_tile),
    size = 3  # Adjust size of the text labels as needed
  )
  # ggdark::dark_theme_void()


map
```

It does however seem that if we go through the online interface, we can use a NTS 1:50,000 map sheet to export a CSV file that does contain information about individual air photo locations (centre coordinate?). Our study area is huge so to begin with we can look at the area from somewhere around the confluence of McQuarie Creek and the Neexdzii Kwah up to say the upstream end of Bulkley Lake. For this area we just have two 1:50,000 map sheets (`093L09` and `093L08`). 



## Download Photo Information

Next, we go into the provincial [WIMSI](https://www2.gov.bc.ca/gov/content/data/geographic-data-services/digital-imagery/air-photos) service and for each NTS 1:50,000 grid - we state the date range we would like to search and export. Thinking we may be able to hit the API directly with a query in the future which would eliminate the painful point and click portion of this workflow.  For now though - we are doing this piece manually and chose the following options:

  - `Years from`: 1950 to 2024
  - `Media`: All
  - `Only show georeferenced images`: - No

Running these options exports a csv for each query.  We saved them in this repo with their original sane names `airphotos.{mapsheet}.csv`.

```{r fig1}
knitr::include_graphics(fs::path(
  path_post,
  "fig",
  "Screenshot1",
  ext = "png"
  )
)

```

At this point we have downloaded two csvs (one for each NTS 1:50,000 mapsheet of course) with information about the airphotos including UTM coordinates that we will assume for now are the photo centres. In our next steps we read in what we have, turn into spatial object, trim to overall study area and plot.

```{r ld-csv}
# list csvs
ls <- fs::dir_ls(
  fs::path(
    path_post,
    "data"),
  glob = "*.csv"
)

photos_raw <- ls |> 
  purrr::map_df(
    readr::read_csv
  ) |> 
  sf::st_as_sf(
    coords = c("Longitude", "Latitude"), crs = 4326
  ) |> 
  janitor::clean_names() |> 
  dplyr::mutate(photo_date = lubridate::mdy(photo_date)) 


photos_aoi <- sf::st_intersection(
  photos_raw, 
  layers_trimmed$aoi |> st_make_valid()
  )

```

```{r map2}

map +
  geom_sf(
    data = photos_aoi,
    alpha = 0.25,
  ) 
  # geom_sf_text(
  #   data = photos_aoi,
  #   aes(
  #     label = 
  #       paste(
  #         # roll_frame_series,
  #         frame,
  #         sep = "-"
  #       )
  #   ),
  #   size = 2  # Adjust size of the text labels as needed
  # )
```

That is a lot of photos! `r nrow(photos_aoi)` photos to be exact!!!


```{r}
q_buffer <- 1000
q_drm_main <- 263795
q_drm_other <- 5000

```

## Clip Photo Information with Streams Buffers
Here are our query parameters to narrow down the area within our selected mapsheets in which we want to find photos for:

  - Buffer: `r q_buffer`m - size of buffer used on either side of stream lines selected
  - Stream segments: 
    + Bulkley River (`gnis_name` in the stream layer)
    + Maxan Creek
    + stream segments which begin before `r q_drm_other` from the mainstem



```{r fig2, eval=FALSE}

# We use the `downstream_route_measure` of the stream layer to exclude areas upstream of Bulkley Lake (also known as Taman Creek).  We find it in QGIS by highlighting the stream layer and clicking on our segment of interest while we have the information tool selected - the resulting pop-up looks like this in QGIS.
knitr::include_graphics(fs::path(
  path_post,
  "fig",
  "Screenshot2",
  ext = "png"
  )
)
```


```{r aoi-refine}

aoi_refined_raw <- layers_trimmed$l_streams |> 
  # removed  & downstream_route_measure < q_drm_main for bulkley as doestn't cahnge 1960s query and increases beyond just by 5 photos
  dplyr::filter(gnis_name == "Bulkley River"|
                  gnis_name != "Bulkley River" & downstream_route_measure < q_drm_other |
                  gnis_name == "Maxan Creek") |> 
  # dplyr::arrange(downstream_route_measure) |>
  # calculate when we get to length_m by adding up the length_metre field and filtering out everything up to length_m
  # dplyr::filter(cumsum(length_metre) <= length_m) |>
  sf::st_union() |> 
  # we need to run st_sf or we get a sp object in a list...
  sf::st_sf()
  
aoi_refined_buffered <- sf::st_buffer(
  aoi_refined_raw,
  q_buffer, endCapStyle = "FLAT"
) 

photos_aoi_refined <- sf::st_intersection(
  photos_raw, 
  aoi_refined_buffered
  )

```

Let's plot again and include our buffered areas around the first `r q_drm_other`m of streams (area in red) along with the location of the photo points that land within that area. Looks like this give us `r nrow(photos_aoi_refined)` photos.

```{r map3}
map +
  geom_sf(
    data = aoi_refined_buffered,
    color = "red",
    alpha= 0
  ) +
  geom_sf(
    data = photos_aoi_refined,
    alpha = 0.25,
  ) 
```

## Filter Photos by Date
Now lets filter by date to see what our options are including the earliest photos possible.  Here is our range to choose from:

```{r date-range}
range(photos_aoi_refined$photo_date)
```
```{r date-param}
q_date_end1 <- "1969-12-31"
q_date_start1 <- "1970-01-01"
q_date_end2 <- "1975-12-31"

```

There is lots going on here so we will map a comparison of a couple of options. First we will look at all photos available for before 1970 (red dots on map below).  We will also see what photos we have for between `r q_date_start1` and on or before `r q_date_end2` (blue dots on map below)?

```{r photos-filter}
photos1 <- photos_aoi_refined |> 
  dplyr::filter(
      photo_date <= q_date_end1
  )

photos2 <- photos_aoi_refined |> 
  dplyr::filter(
    photo_date >= q_date_start1 &
      photo_date <= q_date_end2
  )
```


```{r map4}
map +
  geom_sf(
    data = photos1,
    color = "red",
    alpha = 0.25,
  ) 

map + 
  geom_sf(
    data = photos2,
    color = "blue",
    alpha = 0.25,
  ) 
```

Well we have some tough decisions to make as we seem to have better coverage in the Maxan Creek drainage in the 70s (`r nrow(photos2)` photos) but good coverage of the mainstem Neexdzii Kwah in the 60s (`r nrow(photos1)` photos)...

<br>

 
The table below can be used to filter photos from any time (provided it's location falls in the mapsheet areas we downloaded info for) and export the result to csv or excel file.  This could be useful for narrowing down our search not only to timescales but also to specific mapsheets with options given for both NTS 1:50,000  as well as BCGS 1:20,000 grid mapsheets.

```{r tab1}
photos_aoi_refined |> 
  my_dt_table(cols_freeze_left = 2)
```

## Export `csv` Files with Photo Information
Let's burn out some csvs that can be used to find the imagery for:

  - "before `r q_date_end1`"  
  - `r q_date_start1` to `r q_date_end2` timeline

```{r burn1, eval = TRUE}
lfile_name_photos <- function(dat = NULL){
  fs::path(
      path_post,
      "exports",
      paste(
        "airphotos",
        paste(range(dat$photo_date), collapse = "_"),
        sep = "_"
      ),
      ext = "csv"
    )
}

# path_output <- fs::path(
#       path_post,
#       "exports",
#       paste(
#         "airphotos",
#         paste(range(photos$photo_date), collapse = "_"),
#         sep = "_"
#       ),
#       ext = "csv"
#     )

photos1 |> 
  readr::write_csv(
    lfile_name_photos(photos1), na =""
  )

photos2 |> 
  readr::write_csv(
    lfile_name_photos(photos2), na =""
  )

lpath_link <- function(dat = NULL){
  paste0(
    "https://github.com/NewGraphEnvironment/new_graphiti/tree/main/posts/2024-11-15-bcdata-ortho-historic/exports/",
    basename(
      lfile_name_photos(dat)
    )
  )
}

```

We can view and download exported csv files [here](https://github.com/NewGraphEnvironment/new_graphiti/tree/main/posts/2024-11-15-bcdata-ortho-historic/exports/)

## Pick a Horse
We are absolutely privaledged to potentially have the assistance of Mike Price to help us obtain this imagery from the UBC archives.  Sooo... - unless he has a preference that 100% can override our recommendation - we would think that he would probably prefer clear direction from us.  Soooo - to start - thinking the best plan is to go with the earliest imagery possible and we scan in the "before `r q_date_end1`" timeframe.  The name of the csv with that information is ``r basename(lfile_name_photos(photos1))`` and the file can found along with the other export at the link above or individually [here](`r lpath_link(photos1)`).

## Outstanding Issues

  - Why does the date range of the photos we can get IDs for through the [WIMSI](https://www2.gov.bc.ca/gov/content/data/geographic-data-services/digital-imagery/air-photos) online portal not overlap the dates listed in the BC Data Catalouge [Historic Imagery Points](https://catalogue.data.gov.bc.ca/dataset/airborne-imagery-historical-index-map-points) for the dates in the Historic Imagery Points that are listed as 1950 - 1963 vs our earliest records from the portal at `r min(photos_aoi_refined$photo_date)`??!!
  - Is it crazy to export all mapsheets for the area and add Buck Creek to our study area (easy enough to do) or is this a reasonable start and good enough for a start?

